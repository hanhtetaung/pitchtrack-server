@startuml Pitchtrack

skinparam style strictuml
skinparam DefaultFontName Arial

entity Slot {
  * _id: ObjectId
  * title: String
  * speaker: String
  * notes: String
  * startType: StartType
  * startDate: DateOnly
  * startTime: String <<time>>
  * duration: String <<time>>
  * appearance: Appearance
}

entity User {
  * _id: ObjectId
  * name: String
  * email: String <<email>>
  * password: String
  * role: Role
  * events: Array<ObjectId>
}

entity Event {
  * _id: ObjectId
  * title: String
  * slots: Array<ObjectId>
  * messages: Array<ObjectId>
}

entity Message {
  * _id: ObjectId
  * name: String
  * color: MessageColor
  * weight: MessageWeight
  * isCap: Boolean
}

enum StartType {
  MANUAL
  SCHEDULED
}

enum Appearance {
  COUNTDOWN
  COUNTUP
}

enum Role {
  ORGANIZER
  SPEAKER
}

enum MessageColor {
  WHITE
  GREEN
  RED
}

enum MessageWeight {
  NORMAL
  BOLD
}

Event ||--o Slot : has
Event ||--o Message : has
User ||--o Event : has

' object Slot {
'   _id: string,
'   title: string,
'   speaker: string,
'   notes: string,
'   startType: StartType,
'   startDate: dd-mm-yyyy,
'   startTime: hh:mm,
'   endTime: hh:mm,
'   duration: hh:mm:ss,
'   appearance: CountDown | CountUp,
'   message: 'This is a message',
'   warningTime: mm:ss,
'   dangerTime: mm:ss,
'   warningColor: string,
'   dangerColor: string,
'   warningSound: string,
'   dangerSound: string,
'   flash: boolean,
'   flashCount: number,
'   sortOrder: 1,
'   status: Active | Inactive,
'   startCountAt: hh:mm:ss,
' }

' object Event {
'   title: string,
'   isrunning: boolean,
'   user: User.object.ref,
'   slots: [Slot._id],
'   messages: [Message._id],
' }

' object Message {
'   message: string,
'   color: White | Green | Red,
'   weight: Normal | Bold,
'   cap: Boolean,
' }

' object User {
'   _id: ObjectId,
'   name: string,
'   email: string,
'   password: string,
'   role: Organizer | Speaker,
'   events: [Event._id]
' }

@enduml